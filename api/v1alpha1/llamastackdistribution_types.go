/*
Copyright 2025.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.
// nolint:gci,nolintlint

package v1alpha1

//nolint:gci
import (
	corev1 "k8s.io/api/core/v1"
	apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	"k8s.io/apimachinery/pkg/api/resource"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

const (
	// DefaultContainerName is the default name for the container
	DefaultContainerName = "llama-stack"
	// DefaultServerPort is the default port for the server
	DefaultServerPort int32 = 8321
	// DefaultServicePortName is the default name for the service port
	DefaultServicePortName = "http"
	// DefaultLabelKey is the default key for labels
	DefaultLabelKey = "app"
	// DefaultLabelValue is the default value for labels
	DefaultLabelValue = "llama-stack"
	// DefaultMountPath is the default mount path for storage
	DefaultMountPath = "/.llama"
)

// DefaultStorageSize is the default size for persistent storage
var DefaultStorageSize = resource.MustParse("10Gi")

// DistributionType defines the distribution configuration for llama-stack.
// +kubebuilder:validation:XValidation:rule="!(has(self.name) && has(self.image))",message="Only one of name or image can be specified"
type DistributionType struct {
	// Name is the distribution name that maps to supported distributions.
	// +optional
	Name string `json:"name,omitempty"`
	// Image is the direct container image reference to use
	// +optional
	Image string `json:"image,omitempty"`
}

// HealthStatus represents the health status of a provider
type ProviderHealthStatus struct {
	Status  string `json:"status"`
	Message string `json:"message"`
}

// LlamaStackDistributionSpec defines the desired state of LlamaStackDistribution.
type LlamaStackDistributionSpec struct {
	// +kubebuilder:default:=1
	Replicas int32      `json:"replicas,omitempty"`
	Server   ServerSpec `json:"server"`
}

// ServerSpec defines the desired state of llama server.
type ServerSpec struct {
	Distribution  DistributionType `json:"distribution"`
	ContainerSpec ContainerSpec    `json:"containerSpec,omitempty"`
	PodOverrides  *PodOverrides    `json:"podOverrides,omitempty"` // Optional pod-level overrides
	// Storage defines the persistent storage configuration
	// +optional
	Storage *StorageSpec `json:"storage,omitempty"`
	// UserConfig defines the user configuration for the llama-stack server
	// +optional
	UserConfig *UserConfigSpec `json:"userConfig,omitempty"`
}

type UserConfigSpec struct {
	// ConfigMapName is the name of the ConfigMap containing user configuration
	ConfigMapName string `json:"configMapName"`
	// ConfigMapNamespace is the namespace of the ConfigMap (defaults to the same namespace as the CR)
	// +optional
	ConfigMapNamespace string `json:"configMapNamespace,omitempty"`
}

// StorageSpec defines the persistent storage configuration
type StorageSpec struct {
	// Size is the size of the persistent volume claim created for holding persistent data of the llama-stack server
	Size *resource.Quantity `json:"size,omitempty"`
	// MountPath is the path where the storage will be mounted in the container
	MountPath string `json:"mountPath,omitempty"`
}

// ContainerSpec defines the llama-stack server container configuration.
type ContainerSpec struct {
	// +kubebuilder:default:="llama-stack"
	Name      string                      `json:"name,omitempty"` // Optional, defaults to "llama-stack"
	Port      int32                       `json:"port,omitempty"` // Defaults to 8321 if unset
	Resources corev1.ResourceRequirements `json:"resources,omitempty"`
	Env       []corev1.EnvVar             `json:"env,omitempty"` // Runtime env vars (e.g., INFERENCE_MODEL)
	Command   []string                    `json:"command,omitempty"`
	Args      []string                    `json:"args,omitempty"`
}

// PodOverrides allows advanced pod-level customization.
type PodOverrides struct {
	Volumes      []corev1.Volume      `json:"volumes,omitempty"`
	VolumeMounts []corev1.VolumeMount `json:"volumeMounts,omitempty"`
}

// ProviderInfo represents a single provider from the providers endpoint.
type ProviderInfo struct {
	API          string               `json:"api"`
	ProviderID   string               `json:"provider_id"`
	ProviderType string               `json:"provider_type"`
	Config       apiextensionsv1.JSON `json:"config"`
	Health       ProviderHealthStatus `json:"health"`
}

// DistributionConfig represents the configuration information from the providers endpoint.
type DistributionConfig struct {
	// ActiveDistribution shows which distribution is currently being used
	ActiveDistribution string         `json:"activeDistribution,omitempty"`
	Providers          []ProviderInfo `json:"providers,omitempty"`
	// AvailableDistributions lists all available distributions and their images
	AvailableDistributions map[string]string `json:"availableDistributions,omitempty"`
}

// LlamaStackDistributionStatus defines the observed state of LlamaStackDistribution.
type LlamaStackDistributionStatus struct {
	Version            string             `json:"version,omitempty"`
	DistributionConfig DistributionConfig `json:"distributionConfig,omitempty"`
	Ready              bool               `json:"ready"`
}

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status
//+kubebuilder:printcolumn:name="Version",type="string",JSONPath=".status.version"
//+kubebuilder:printcolumn:name="Ready",type="boolean",JSONPath=".status.ready"
// LlamaStackDistribution is the Schema for the llamastackdistributions API

type LlamaStackDistribution struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   LlamaStackDistributionSpec   `json:"spec"`
	Status LlamaStackDistributionStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// LlamaStackDistributionList contains a list of LlamaStackDistribution.
type LlamaStackDistributionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LlamaStackDistribution `json:"items"`
}

func init() { //nolint:gochecknoinits
	SchemeBuilder.Register(&LlamaStackDistribution{}, &LlamaStackDistributionList{})
}

// HasPorts checks if the container spec defines a port.
func (r *LlamaStackDistribution) HasPorts() bool {
	return r.Spec.Server.ContainerSpec.Port != 0 || len(r.Spec.Server.ContainerSpec.Env) > 0
}
